class Solution {
    public int maxProfit(int[] prices) {
    int max=0 , min=prices[0];
    
    for(int i=0;i<prices.length;i++){
        if(prices[i]<min)
        {
            min=prices[i];
        }
        else
        {
            max=Math.max(max,prices[i]-min);
        }
    }
    return max;
}
}
PSEUDO CODE
Function maxProfit(prices):
    Initialize max = 0
    Initialize min = prices[0]

    For i = 0 to length of prices - 1:
        If prices[i] < min:
            min = prices[i]
        Else:
            max = Maximum of (max, prices[i] - min)

    Return max

⏰ Time Complexity:
The loop runs through the array once, performing constant time operations in each iteration.
Time Complexity = O(n)
where n = number of days (length of prices array).

💾 Space Complexity:
Only a few variables (max, min) are used; no extra data structures.
Space Complexity = O(1) (constant space)

Summary:
Time Complexity: O(n)
Space Complexity: O(1)

