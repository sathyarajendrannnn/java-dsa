class Solution {
    public boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        
        while (left < right) {
            // Move left pointer until it finds an alphanumeric character
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }
            // Move right pointer until it finds an alphanumeric character
            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }
            
            // Compare characters (ignoring case)
            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
                return false;
            }
            
            left++;
            right--;
        }
        
        return true;
    }
}
Step-by-Step Execution
Initialize Two Pointers (left and right)
left starts from the beginning (0).
right starts from the end (s.length() - 1).
Ignore Non-Alphanumeric Characters
The loop while (left < right && !Character.isLetterOrDigit(s.charAt(left))) moves left forward until it finds a valid character.
Similarly, while (left < right && !Character.isLetterOrDigit(s.charAt(right))) moves right backward until it finds a valid character.
Compare Characters (Ignoring Case)
Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right)) checks if the lowercase versions of s[left] and s[right] are not the same.
If they are not equal, return false (not a palindrome).
Otherwise, move both pointers (left++, right--) toward the center.
Continue Until Pointers Meet or Cross
If the loop completes without returning false, the string is a palindrome.
Return true.

Time Complexity	O(n)
Space Complexity	O(1)
