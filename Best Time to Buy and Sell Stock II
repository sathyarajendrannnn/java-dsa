class Solution {
    public int maxProfit(int[] prices) {
    int maxpro=0 , min=prices[0];
    
    for(int i=0;i<prices.length;i++){
        if(prices[i]<min)
        {
            min=prices[i];
        }
        else
        {
            maxpro+=prices[i]-min;
            min=prices[i];
        }
    }
    return maxpro;

    }
}
✅ Pseudo Code:
Function maxProfit(prices):
    Initialize maxProfit = 0
    Initialize min = prices[0]

    For i = 0 to length of prices - 1:
        If prices[i] < min:
            min = prices[i]
        Else:
            maxProfit += prices[i] - min
            min = prices[i]

    Return maxProfit

🔍 Explanation:
Start with min as the first day's price.
Loop over the prices:
If current price < min → update min (new buying price)
Else:
Sell stock → profit = current price - min
Add profit to maxProfit.
Update min to current price (prepare for next buy)

⏰ Time Complexity:
O(n) → Single pass through the array.

💾 Space Complexity:
O(1) → Constant space usage (only variables min and maxProfit).
